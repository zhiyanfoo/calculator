Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Unused terminals:

    FUNCTION_MULTI
    FUNCTION_1
    FUNCTION_0
    IDENTIFIER

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> expression + expression
Rule 3     expression -> expression - expression
Rule 4     expression -> NUMBER

Terminals, with rules where they appear

+                    : 2
-                    : 3
FUNCTION_0           : 
FUNCTION_1           : 
FUNCTION_MULTI       : 
IDENTIFIER           : 
NUMBER               : 4
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 2 3 3
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . NUMBER

    NUMBER          shift and go to state 3

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression

    $end            reduce using rule 1 (statement -> expression .)
    +               shift and go to state 4
    -               shift and go to state 5


state 3

    (4) expression -> NUMBER .

    +               reduce using rule 4 (expression -> NUMBER .)
    -               reduce using rule 4 (expression -> NUMBER .)
    $end            reduce using rule 4 (expression -> NUMBER .)


state 4

    (2) expression -> expression + . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . NUMBER

    NUMBER          shift and go to state 3

    expression                     shift and go to state 6

state 5

    (3) expression -> expression - . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . NUMBER

    NUMBER          shift and go to state 3

    expression                     shift and go to state 7

state 6

    (2) expression -> expression + expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression

    +               reduce using rule 2 (expression -> expression + expression .)
    -               reduce using rule 2 (expression -> expression + expression .)
    $end            reduce using rule 2 (expression -> expression + expression .)

  ! +               [ shift and go to state 4 ]
  ! -               [ shift and go to state 5 ]


state 7

    (3) expression -> expression - expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression

    +               reduce using rule 3 (expression -> expression - expression .)
    -               reduce using rule 3 (expression -> expression - expression .)
    $end            reduce using rule 3 (expression -> expression - expression .)

  ! +               [ shift and go to state 4 ]
  ! -               [ shift and go to state 5 ]

